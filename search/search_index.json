{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>This git repository is a set of tools used to make life easier for sys/net admins. Nothing is perfect, and we welcome any comments you may have.</p>"},{"location":"Active%20Directory/Modules/","title":"Active Directory","text":""},{"location":"Active%20Directory/Modules/#prerequisites","title":"Prerequisites","text":"<ul> <li>ActiveDirectory PowerShell module</li> <li>This module is tested in PowerShell 7.3</li> </ul>"},{"location":"Active%20Directory/Modules/#description","title":"Description","text":"<p>These modules allow you to manage Active Directory objects.</p> <p>You can : </p> <ul> <li> <p>Launch DCDiag</p> </li> <li> <p>Generate Username / Password</p> </li> </ul>"},{"location":"Active%20Directory/Modules/#usage","title":"Usage","text":"<p>Usage depends on the module you import</p>"},{"location":"Active%20Directory/Modules/#import-module","title":"Import Module","text":"<pre><code># To Import DCDiag module : \nImport-Module \".\\ActiveDirectory\\Invoke-GFTDCDiag.psm1\"\n</code></pre>"},{"location":"Active%20Directory/Modules/#list-of-function","title":"List of function","text":"<ul> <li>Invoke-GFTDCDiag</li> <li>Invoke an DCDiag on your Domain Controllers</li> <li>New-GFTUsername</li> <li>Generate Username for your users</li> <li>New-GFTPassword</li> <li>Generate Password</li> </ul>"},{"location":"Active%20Directory/Functions/Get-GFTADUser/","title":"Get-GFTADUser","text":""},{"location":"Active%20Directory/Functions/Get-GFTADUser/#definition","title":"Definition","text":"<p>This function allow you to get user from all DC in your AD. Resolve replication delay.</p>"},{"location":"Active%20Directory/Functions/Get-GFTADUser/#usage","title":"Usage","text":"<pre><code>#For default properties:\nGet-GFTADUser myuser\n\n#For others properties:\nGet-GFTADUser myuser -Properties mail,LastLogonDate\n</code></pre>"},{"location":"Active%20Directory/Functions/Get-GFTADUser/#default-options","title":"Default options","text":"<pre><code># This function cannot be run without samaccountname\n[Parameter(Mandatory)]\n[ValidateNotNullOrEmpty()]\n[string]$SamAccountName\n</code></pre>"},{"location":"Active%20Directory/Functions/Invoke-GFTDcDiag/","title":"Invoke-GFTDcDiag","text":""},{"location":"Active%20Directory/Functions/Invoke-GFTDcDiag/#definition","title":"Definition","text":"<p>This function allow you to invoke DCDiag on one or multiple domain controller.</p>"},{"location":"Active%20Directory/Functions/Invoke-GFTDcDiag/#usage","title":"Usage","text":"<pre><code>#For one domain controller:\nInvoke-GFTDcDiag -DomainControllers AD01\n\n#For Multiple domain controllers:\nInvoke-GFTDcDiag -DomainControllers AD01,AD02\n\n#For each DC in your Farm:\n$DCs = ([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Sites | % { $_.Servers } | select Name).Name\nInvoke-GFTDcDiag -DomainControllers $DCs\n</code></pre>"},{"location":"Active%20Directory/Functions/Invoke-GFTDcDiag/#default-options","title":"Default options","text":"<pre><code># This function cannot be run without DC Name\n[Parameter(Mandatory)]\n[ValidateNotNullOrEmpty()]\n[string[]]$DomainControllers\n</code></pre>"},{"location":"Active%20Directory/Functions/New-GFTPassword/","title":"New-GFTPassword","text":""},{"location":"Active%20Directory/Functions/New-GFTPassword/#definition","title":"Definition","text":"<p>This function allow you to generate passwords. Lenght is limited to 62.</p>"},{"location":"Active%20Directory/Functions/New-GFTPassword/#usage","title":"Usage","text":"<pre><code># Simple example\nNew-GFTPassword\n\n# Remove complexity\nNew-GFTPassword -NoComplexity\n\n# Password not complex with 29 characters\nNew-GFTPassword -NoComplexity -Lenght 29\n</code></pre>"},{"location":"Active%20Directory/Functions/New-GFTPassword/#default-options","title":"Default options","text":"<pre><code># Lenght is your password lenght\n[parameter(Mandatory=$false, Position=0)]\n[int]$Lenght = 18\n\n# NoComplexity remove complex characters\n[parameter(Mandatory=$false, Position=1)]\n[switch]$NoComplexity\n</code></pre>"},{"location":"Active%20Directory/Functions/New-GFTUsername/","title":"New-GFTUsername","text":""},{"location":"Active%20Directory/Functions/New-GFTUsername/#definition","title":"Definition","text":"<p>This function allow you to generate username.</p> <p>It check in Active Directory if username is already present and create another if it the case.</p>"},{"location":"Active%20Directory/Functions/New-GFTUsername/#usage","title":"Usage","text":"<pre><code># Simple example\nNew-GFTUsername Dorian Irsi\n\n# No Check in Active Directory\nNew-GFTUsername -FirstName Dorian -LastName Irsi -NoADCheck\n\n# Add prefix (ex: service account)\n# If you add prefix, firstname isn't truncate\nNew-GFTUsername -FirstName opnsense -LastName connect -Prefix svc_\n\n# Remove 15 characters limitation\nNew-GFTUsername -FirstName Dorian -LastName IrsiTheBestHRInthePlace -NumberOfLetters 25\n</code></pre>"},{"location":"Active%20Directory/Functions/New-GFTUsername/#default-options","title":"Default options","text":"<pre><code># Firstname is mandatory\n[parameter(Mandatory=$true, Position=0)]\n[string]$FirstName\n\n# Lastname is not mandatory, if you want generate an specific account (firstname will be not truncate)\n[parameter(Mandatory=$false, Position=1)]\n[string]$LastName\n\n# NumbersOfLetters is not mandatory but it's fixed at 15. This parameter truncate username.\n[parameter(Mandatory=$false, Position=2)]\n[int]$NumberOfLetters = 15\n\n# NoADCheck allow you to bypass AD Check\n[parameter(Mandatory=$false, Position=3)]\n[switch]$NoADCheck\n\n# Prefix add prefix to username (firstname will be not truncate)\n[parameter(Mandatory=$false, Position=4)]\n[String]$Prefix\n</code></pre>"},{"location":"OpnSense/Module/","title":"OpnSense","text":""},{"location":"OpnSense/Module/#prerequisites","title":"Prerequisites","text":"<ul> <li>ActiveDirectory PowerShell module</li> <li>This module is tested in PowerShell 7.3</li> </ul> <pre><code># If you use Passbolt module and function\nInstall-Module -Name PSPGP -AllowClobber -Force -Scope AllUsers\n</code></pre>"},{"location":"OpnSense/Module/#description","title":"Description","text":"<p>This module allow you to manage Users in OpnSense firewall.</p> <p>You can : </p> <ul> <li> <p>Import from LDAP</p> </li> <li> <p>Create &amp; delete certificate</p> </li> <li> <p>Create &amp; generate OTP Code</p> </li> <li> <p>Create VPN File (OpenVPN)</p> </li> </ul>"},{"location":"OpnSense/Module/#usage","title":"Usage","text":""},{"location":"OpnSense/Module/#connect","title":"Connect","text":"<pre><code>$User = \"myuser\"\n$Password = \"MyPassword\"\n$RTRUrl = \"https://myfirewall.local/\"\n$Session = (Open-GFTOpnSenseConnection -RTRUrl $RTRUrl)\nGet-GFTOpnSenseLogin -Session $Session -Login $User -Password $Password\n</code></pre>"},{"location":"OpnSense/Module/#administration","title":"Administration","text":"<p>Test if user exist : </p> <pre><code># Connect with connection example\n$Username = \"MyUser\"\nif (Get-GFTOpnSenseUserID -Session $Session -User $Username) {\n  \"Exist\"\n} else {\n  \"Not\"\n}\n</code></pre> <p>Create certificate for user :</p> <pre><code># Connect with connection example\n$Username = \"MyUser\"\nNew-GFTOpnSenseUserCertificate -User $Username -Session $Session\n</code></pre>"},{"location":"OpnSense/Module/#list-of-function","title":"List of function","text":"<ul> <li>Get-GFTOpnSenseCSRFToken</li> <li>Allows you to retrieve the CSRF Token</li> <li>Open-GFTOpnSenseConnection</li> <li>Open first connection to OpnSense Firewall</li> <li>Add necessary Cookie and Headers </li> <li>Get-GFTOpnSenseLogin</li> <li>Login to Firewall web interface to initialize connection</li> <li>Get-GFTOpnSenseLDAPUsers</li> <li>Return array from Import LDAP page</li> <li>Check samaccountname in Active Directory with Get-ADUser cmdlet</li> <li>Import-GFTOpnSenseLDAPUser</li> <li>Import user from Import LDAP page</li> <li>Get-GFTOpnSenseUserID</li> <li>Return User ID if exist</li> <li>Get-GFTOpnSenseUserDN</li> <li>Return User DN if exist</li> <li>Get-GFTOpnSenseGroup</li> <li>Return existing groups in OpnSense </li> <li>Get-GFTOpnSenseUserGroup</li> <li>Return groups from existing user</li> <li>Get-GFTOpnSenseUserTOTP</li> <li>Return user OTP</li> <li>Get-GFTOpnSenseRouters</li> <li>This function is Passbolt PowerShell and OpnSense and creates a password-free csv (cache).</li> <li>Passbolt needs to store information from different firewalls</li> <li>Add-GFTOpnSenseTOTP</li> <li>Add OTP to user</li> <li>Add-GFTOpnSenseGroupToUser</li> <li>Add group to user</li> <li>Get-GFTOpnSenseCAID</li> <li>Return CA ID for create certificate</li> <li>You have to create certificate one time with this CA and link certificate to root user (id:0)</li> <li>New-GFTOpnSenseUserCertificate</li> <li>Create certificate for an exisiting user</li> <li>Remove-GFTOpnSenseUserCertificate</li> <li>Delete certificate for an existing user</li> <li>Get-GFTOpnSenseOpenVPNProviders</li> <li>Return OpenVPN Providers</li> <li>Get-GFTOpnSenseOpenVPNUsers</li> <li>Return OpenVPN Users</li> <li>Get-GFTOpnSenseOpenVPNFiles</li> <li>Construct VPN File for an user to Path</li> <li>Test-GFTOpnSenseUserCertificates</li> <li>Test if an certificate exist</li> <li>Get-GFTOpnSenseCertificates</li> <li>Retreive all OpnSense Certificates</li> <li>Remove-GFTOpnSenseCertificate</li> <li>Remove OpnSense Certificate</li> <li>Remove-GFTOpnSenseUser</li> <li>Remove OpnSense user</li> <li>Get-GFTOpnSenseUserList</li> <li>Return list of OpnSense Users</li> <li>New-GFTOpnSenseUser</li> <li>This function allows you to follow the complete path from import to VPN file creation.</li> </ul>"},{"location":"OpnSense/Functions/Get-GFTOpnSenseCSRFToken/","title":"Get-GFTOpnSenseCSRFToken","text":""},{"location":"OpnSense/Functions/Get-GFTOpnSenseCSRFToken/#definition","title":"Definition","text":"<p>This function allow you to get the CSRF token. It's mandatory to navigate on the web interface.</p>"},{"location":"OpnSense/Functions/Get-GFTOpnSenseCSRFToken/#usage","title":"Usage","text":"<pre><code>$Session = (Open-GFTOpnSenseConnection -RTRUrl \"https://myfirewall.url\")\nGet-GFTOpnSenseCSRFToken -Session $Session\n</code></pre>"},{"location":"OpnSense/Functions/Get-GFTOpnSenseCSRFToken/#default-options","title":"Default options","text":"<pre><code># You have session with : Open-GFTOpnSenseConnection\n# Store it in $Session Variable\n[Microsoft.PowerShell.Commands.WebRequestSession]$Session\n# Router URL ($RTRUrl) can be automaticaly set with Open-GFTOpnSenseConnection function, you can put your custom URL\n$RTRUrl = $($Session.Headers.origin)\n[string]$Path = \"/ui/openvpn/export\"\n</code></pre>"},{"location":"OpnSense/Functions/Get-GFTOpnSenseLogin/","title":"Get-GFTOpnSenseLogin","text":""},{"location":"OpnSense/Functions/Get-GFTOpnSenseLogin/#definition","title":"Definition","text":"<p>This function log PowerShell session to firewall web interface and initialize connection. You must have credentials.</p>"},{"location":"OpnSense/Functions/Get-GFTOpnSenseLogin/#usage","title":"Usage","text":"<pre><code>$Creds = (Get-Credential)\n$Session = (Open-GFTOpnSenseConnection -RTRUrl \"https://myfirewall.url\")\nGet-GFTOpnSenseLogin -Login $Creds.Username -Password $Creds.GetNetworkCredential().Password -Session $Session\n</code></pre>"},{"location":"OpnSense/Functions/Get-GFTOpnSenseLogin/#default-options","title":"Default options","text":"<pre><code># You have session with : Open-GFTOpnSenseConnection\n# Store it in $Session Variable\n[Microsoft.PowerShell.Commands.WebRequestSession]$Session\n# Router URL ($RTRUrl) can be automaticaly set with Open-GFTOpnSenseConnection function, you can put your custom URL\n$RTRUrl = $($Session.Headers.origin)\n$Login = \"\"\n$Password = ''\n</code></pre>"},{"location":"OpnSense/Functions/Open-GFTOpnSenseConnection/","title":"Open-GFTOpnSenseConnection","text":""},{"location":"OpnSense/Functions/Open-GFTOpnSenseConnection/#definition","title":"Definition","text":"<p>This function open the first connection to OpnSense Firewall It add necessary Cookies and Headers</p>"},{"location":"OpnSense/Functions/Open-GFTOpnSenseConnection/#usage","title":"Usage","text":"<pre><code>$Session = (Open-GFTOpnSenseConnection -RTRUrl \"https://myfirewall.url\")\n# Variable session content\n$Session | ConvertTo-Json\n{\n  \"Headers\": {\n    \"authority\": \"https://myfirewall.url\",\n    \"scheme\": \"https\",\n    \"origin\": \"https://myfirewall.url\",\n    \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n    \"accept-encoding\": \"gzip, deflate, br\",\n    \"accept-language\": \"fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7\",\n    \"HiddenName\": \"eml1L25zZjhWT1ZtYjVwLzUycFd2UT09\",\n    \"HiddenValue\": \"NEVocUlFbDNnc21WTHc1Z1I2YVJadz09\",\n    \"x-csrftoken\": \"NEVocUlFbDNnc21WTHc1Z1I2YVJadz09\",\n    \"x-requested-with\": \"XMLHttpRequest\"\n  },\n  \"Cookies\": {\n    \"Capacity\": 300,\n    \"Count\": 4,\n    \"MaxCookieSize\": 4096,\n    \"PerDomainCapacity\": 20\n  },\n  \"UseDefaultCredentials\": false,\n  \"Credentials\": null,\n  \"Certificates\": null,\n  \"UserAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\",\n  \"Proxy\": null,\n  \"MaximumRedirection\": -1,\n  \"MaximumRetryCount\": 0,\n  \"RetryIntervalInSeconds\": 0\n}\n</code></pre>"},{"location":"OpnSense/Functions/Open-GFTOpnSenseConnection/#default-options","title":"Default options","text":"<pre><code># You have session with : Open-GFTOpnSenseConnection\n# Store it in $Session Variable\n[Microsoft.PowerShell.Commands.WebRequestSession]$Session\n# Router URL ($RTRUrl) can be automaticaly set with Open-GFTOpnSenseConnection function, you can put your custom URL\n$RTRUrl = $($Session.Headers.origin)\n[string]$Path = \"/ui/openvpn/export\"\n</code></pre>"}]}